rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        function isSignedIn() {
            return request.auth.uid != null;
        }
        function isItMine() {
            return request.auth.uid == resource.data.id;
        }
        match /users/{user} {
            allow read: if isSignedIn();
            allow create: if false;
            allow update: if isItMine() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'photoUrl', 'tokens']);
            allow delete: if false;
        }
        match /posts/{post} {
            allow read: if true;
            allow create: if isSignedIn();
            allow update: if request.resource.data.diff(resource.data).affectedKeys().hasOnly(['commentCount', 'likedUserIds']);
            allow delete: if false;
            match /likes/{like} {
                allow read, write: if isSignedIn();
            }
        }
        match /{somePath=**}/comments/{comment} {
            allow read, write: if isSignedIn();
        }
        match /tags/{tag} {
            allow read: if isSignedIn();
            allow create: if false;
            allow update: if false;
            allow delete: if false;
        }
        match /conversations/{conversation} {
            allow read: if isSignedIn();
            allow create: if isSignedIn();
            allow update: if isSignedIn();
            allow delete: if false;
            match /messages/{message} {
                allow read, write: if isSignedIn();
            }
        }
        match /meetings/{meeting} {
            allow read: if isSignedIn();
            allow create: if isSignedIn();
            allow update: if isSignedIn();
            allow delete: if false;
        }
    }
}